##########################################
# section 3.1 Introduction to R
##########################################
# import a csv file of the total annual sales for each customer
sales <- read.csv("/Users/vaibhavkumar/Cumberlands/Data Science/Week2-R/yearly_sales.csv")
# examine the imported dataset
head(sales)
summary(sales)
# plot num_of_orders vs. sales
plot(sales$num_of_orders,sales$sales_total,
main="Number of Orders vs. Sales")
# perform a statistical analysis (fit a linear regression model)
results <- lm(sales$sales_total ~ sales$num_of_orders)
results
summary(results)
# perform some diagnostics on the fitted model
# plot histogram of the residuals
hist(results$residuals, breaks = 800)
##########################################
# section 3.1.2 Data Import and Export
##########################################
sales <- read.csv("/Users/vaibhavkumar/Cumberlands/Data Science/Week2-R/yearly_sales.csv")
setwd("/Users/vaibhavkumar/Cumberlands/Data Science/Week2-R/")
sales <- read.csv("yearly_sales.csv")
sales_table <- read.table("yearly_sales.csv", header=TRUE, sep=",")
sales_delim <- read.delim("yearly_sales.csv", sep=",")
# add a column for the average sales per order
sales$per_order <- sales$sales_total/sales$num_of_orders
# export data as tab delimited without the row names
write.table(sales,"sales_modified.txt", sep="\t", row.names=FALSE)
# export a histogram to a jpeg
jpeg(file="/Users/vaibhavkumar/Cumberlands/Data Science/Week2-R/DataAnalytics/sales_hist.jpeg") # create a new jpeg file
hist(sales$num_of_orders) # export histogram to jpeg
dev.off() # shut off the graphic device
##########################################
# section 3.1.3 Attribute and Data Types
##########################################
# Numeric, Character, and Logical Data Types
i <- 1                      # create a numeric variable
sport <- "football"         # create a character variable
flag <- TRUE                # create a logical variable
class(i)                    # returns "numeric"
typeof(i)                   # returns "double"
class(sport)                # returns "character"
typeof(sport)               # returns "character"
class(flag)                 # returns "logical"
typeof(flag)                # returns "logical"
is.integer(i)               # returns FALSE
j <- as.integer(i)          # coerces contents of i into an integer
is.integer(j)               # returns TRUE
length(i)                   # returns 1
length(flag)                # returns 1
length(sport)               # returns 1 (not 8 for "football")
# Vectors
is.vector(i)                # returns TRUE
is.vector(flag)             # returns TRUE
is.vector(sport)            # returns TRUE
u <- c("red", "yellow", "blue") # create a vector "red" "yellow" "blue"
u                               # returns "red" "yellow" "blue"
u[1]                            # returns "red" (1st element in u)
v <- 1:5                        # create a vector 1 2 3 4 5
v                               # returns 1 2 3 4 5
sum(v)                          # returns 15
w <- v * 2                      # create a vector 2 4 6 8 10
w                               # returns 2 4 6 8 10
w[3]                            # returns 6 (the 3rd element of w)
z <- v + w                      # sums two vectors element by element
z                               # returns 3 6 9 12 15
z > 8                           # returns FALSE FALSE TRUE TRUE TRUE
z[z > 8]                        # returns 9 12 15
z[z > 8 | z < 5]                # returns 3 9 12 15 ("|" denotes "or")
a <- vector(length=3)           # create a logical vector of length 3
a                               # returns FALSE FALSE FALSE
b <- vector(mode="numeric", 3)  # create a numeric vector of length 3
typeof(b)                       # returns "double"
b[2] <- 3.1                     # assign 3.1 to the 2nd element
b                               # returns 0.0 3.1 0.0
c <- vector(mode="integer", 0)  # create an integer vector of length 0
c                               # returns integer(0)
length(c)                       # returns 0
length(b)                       # returns 3
dim(b)                          # returns NULL (an undefined value)
# the dimensions are 3 regions, 4 quarters, and 2 years
quarterly_sales <- array(0, dim=c(3,4,2))
quarterly_sales[2,1,1] <- 158000
quarterly_sales
sales_matrix <- matrix(0, nrow = 3, ncol = 4)
sales_matrix
M <- matrix(c(1,3,3,5,0,4,3,3,3),nrow = 3,ncol = 3) # build a 3x3 matrix
M %*% matrix.inverse(M)
# Data Frames
#import a CSV file of the total annual sales for each customer
sales <- read.csv("/Users/vaibhavkumar/Cumberlands/Data Science/Week2-R/yearly_sales.csv")
is.data.frame(sales)              # returns TRUE
length(sales$num_of_orders)       # returns 10000 (number of customers)
is.vector(sales$cust_id)          # returns TRUE
is.vector(sales$sales_total)      # returns TRUE
is.vector(sales$num_of_orders)    # returns TRUE
is.vector(sales$gender)           # returns FALSE
is.factor(sales$gender)           # returns TRUE
str(sales) # display structure of the data frame object
# extract the fourth column of the sales data frame
sales[,4]
# extract the gender column of the sales data frame
sales$gender
# retrieve the first two rows of the data frame
sales[1:2,]
# retrieve the first, third, and fourth columns
sales[,c(1,3,4)]
# retrieve both the cust_id and the sales_total columns
sales[,c("cust_id", "sales_total")]
# retrieve all the records whose gender is female
sales[sales$gender=="F",]
class(sales)
typeof(sales)
# Lists
# build an assorted list of a string, a numeric, a list, a vector,
# and a matrix
housing <- list("own", "rent")
assortment <- list("football", 7.5, housing, v, M)
assortment
# examine the fifth object, M, in the list
class(assortment[5])               # returns "list"
length(assortment[5])              # returns 1
class(assortment[[5]])             # returns "matrix"
length(assortment[[5]])            # returns 9 (for the 3x3 matrix)
str(assortment)
# Factors
class(sales$gender)       # returns "factor"
is.ordered(sales$gender)  # returns FALSE
head(sales$gender)        # display first six values and the levels
data(diamonds)            # load the data frame into the R workspace
str(diamonds)
head(diamonds$cut)        # display first six values and the levels
# build an empty character vector of the same length as sales
sales_group <- vector(mode="character",
length=length(sales$sales_total))
# group the customers according to the sales amount
sales_group[sales$sales_total<100] <- "small"
sales_group[sales$sales_total>=100 & sales$sales_total<500] <- "medium"
sales_group[sales$sales_total>=500] <- "big"
# group the customers according to the sales amount
sales_group[sales$sales_total<100] <- "small"
sales_group[sales$sales_total>=100 & sales$sales_total<500] <- "medium"
sales_group[sales$sales_total>=500] <- "big"
str(sales$spender)
# create and add the ordered factor to the sales data frame
spender <- factor(sales_group,levels=c("small", "medium", "big"),
ordered = TRUE)
sales <- cbind(sales,spender)
str(sales$spender)
head(sales$spender)
# Contingency Tables
# build a contingency table based on the gender and spender factors
sales_table <- table(sales$gender,sales$spender)
sales_table
class(sales_table)            # returns "table"
typeof(sales_table)           # returns "integer"
dim(sales_table)              # returns 2 3
# performs a chi-squared test
summary(sales_table)
##########################################
# section 3.1.4 Descriptive Statistics
##########################################
summary(sales)
# to simplify the function calls, assign
x <- sales$sales_total
y <- sales$num_of_orders
cor(x,y)         # returns 0.7508015 (correlation)
cov(x,y)         # returns 345.2111 (covariance)
IQR(x)           # returns 215.21 (interquartile range)
mean(x)          # returns 249.4557 (mean)
median(x)        # returns 151.65 (median)
range(x)         # returns 30.02 7606.09 (min max)
sd(x)            # returns 319.0508 (std. dev.)
var(x)           # returns 101793.4 (variance)
apply(sales[,c(1:3)], MARGIN=2, FUN=sd)
# build a function to provide the difference between
# the maximum and the minimum values
my_range <- function(v) {range(v)[2] - range(v)[1]}
my_range(x)
load("~/Cumberlands/Data Science/Week2-R/DataAnalytics/.RData")
##########################################
# section 3.2 Exploratory Data Analysis
##########################################
# Figure 3-5
x <- rnorm(50)
y <- x + rnorm(50, mean=0, sd=0.5)
data <- as.data.frame(cbind(x, y))
summary(data)
library(ggplot2)
ggplot(data, aes(x=x, y=y)) +
geom_point(size=2) +
ggtitle("Scatterplot of X and Y") +
theme(axis.text=element_text(size=12),
axis.title = element_text(size=14),
plot.title = element_text(size=20, face="bold"))
##########################################
# section 3.2.1 Visualization Before Analysis
##########################################
data(anscombe)
anscombe
nrow(anscombe)
# generates levels to indicate which group each data point belongs to
levels <- gl(4,nrow(anscombe))
levels
# Group anscombe into a data frame
mydata <- with(anscombe,data.frame(x=c(x1,x2,x3,x4), y=c(y1,y2,y3,y4), mygroup=levels))
mydata
# Make scatterplots using the ggplot2 package
theme_set(theme_bw()) # set plot color theme
# create the four plots of Figure 3-7
ggplot(mydata, aes(x,y)) +
geom_point(size=4) +
geom_smooth(method="lm", fill=NA, fullrange=TRUE) +
facet_wrap(~mygroup)
##########################################
# section 3.2.2 Dirty Data
##########################################
age <- rnorm(6000, mean=40, sd=10)
age <- c( age, runif(20, min=-2, max=0),
rep(0,400),
runif(40, min=100, max=110))
age <- round(age)
hist(age, breaks=100, main="Age Distribution of Account Holders",
xlab="Age", ylab="Frequency", col="gray")
x <- c(1, 2, 3, NA, 4)
is.na(x)
mean(x)
mean(x, na.rm=TRUE)
DF <- data.frame(x = c(1, 2, 3), y = c(10, 20, NA))
DF
DF1 <- na.exclude(DF)
DF1
mortgage <- rbeta(2000,2,4) * 10
mortgage <- c( mortgage, rep(10, 1000))
hist(mortgage, breaks=10, xlab="Mortgage Age", col="gray",
main="Portfolio Distribution, Years Since Origination")
##########################################
# section 3.2.3 Visualizing a Single Variable
##########################################
data(mtcars)
## Dotchart and Barplot ##
dotchart(mtcars$mpg,labels=row.names(mtcars),cex=.7,
main="Miles Per Gallon (MPG) of Car Models",
xlab="MPG")
barplot(table(mtcars$cyl), main="Distribution of Car Cylinder Counts",
xlab="Number of Cylinders")
## Histogram and Density Plot ##
# randomly generate 4000 observations from the log normal distribution
income <- rlnorm(4000, meanlog = 4, sdlog = 0.7)
summary(income)
income <- 1000*income
summary(income)
# plot the histogram
hist(income, breaks=500, xlab="Income", main="Histogram of Income")
# density plot
plot(density(log10(income), adjust=0.5),
main="Distribution of Income (log10 scale)")
# add rug to the density plot
plot(density(log10(income), adjust=0.5),
main="Distribution of Income (log10 scale)")
# add rug to the density plot
rug(log10(income))
library("ggplot2")
theme_set(theme_grey())
data(diamonds) # load the diamonds dataset from ggplot2
# Only keep the premium and ideal cuts of diamonds
niceDiamonds <- diamonds[diamonds$cut=="Premium" |
diamonds$cut=="Ideal",]
summary(niceDiamonds$cut)
# plot density plot of diamond prices
ggplot(niceDiamonds, aes(x=price, fill=cut)) +
geom_density(alpha = .3, color=NA)
# plot density plot of the log10 of diamond prices
ggplot(niceDiamonds, aes(x=log10(price), fill=cut)) +
geom_density(alpha = .3, color=NA)
##########################################
# section 3.2.4 Examining Multiple Variables
##########################################
# 75 numbers between 0 and 10 of uniform distribution
x <- runif(75, 0, 10)
x <- sort(x)
y <- 200 + x^3 - 10 * x^2 + x + rnorm(75, 0, 20)
lr <- lm(y ~ x) # linear regression
poly <- loess(y ~ x) # LOESS
fit <- predict(poly) # fit a nonlinear line
plot(x,y)
# draw the fitted line for the linear regression
points(x, lr$coefficients[1] + lr$coefficients[2] * x,
type = "l", col = 2)
# draw the fitted line with LOESS
points(x, fit, type = "l", col = 4)
## Dotchart and Barplot ##
# sort by mpg
cars <- mtcars[order(mtcars$mpg),]
# grouping variable must be a factor
cars$cyl <- factor(cars$cyl)
cars$cyl <- factor(cars$cyl)
cars$color[cars$cyl==4] <- "red"
cars$color[cars$cyl==6] <- "blue"
cars$color[cars$cyl==8] <- "darkgreen"
dotchart(cars$mpg, labels=row.names(cars), cex=.7, groups= cars$cyl,
main="Miles Per Gallon (MPG) of Car Models\nGrouped by Cylinder",
xlab="Miles Per Gallon", color=cars$color, gcolor="black")
counts <- table(mtcars$gear, mtcars$cyl)
barplot(counts, main="Distribution of Car Cylinder Counts and Gears",
xlab="Number of Cylinders", ylab="Counts",
col=c("#0000FFFF", "#0080FFFF", "#00FFFFFF"),
legend = rownames(counts), beside=TRUE,
args.legend = list(x="top", title = "Number of Gears"))
## Box-and-Whisker Plot ##
DF <- read.csv("/Users/vaibhavkumar/Cumberlands/Data Science/Week2-R/DataAnalytics/zipIncome.csv", header=TRUE, sep=",")
# Remove outliers
DF <- subset(DF, DF$MeanHouseholdIncome > 7000 & DF$MeanHouseholdIncome < 200000)
summary(DF)
library(ggplot2)
# plot the jittered scatterplot w/ boxplot
# color-code points with zip codes
# the outlier.size=0 prevents the boxplot from plotting the outlier
ggplot(data=DF, aes(x=as.factor(Zip1), y=log10(MeanHouseholdIncome))) +
geom_point(aes(color=factor(Zip1)), alpha=0.2, position="jitter") +
geom_boxplot(outlier.size=0, alpha=0.1) +
guides(colour=FALSE) +
ggtitle ("Mean Household Income by Zip Code")
# simple boxplot
boxplot(log10(MeanHouseholdIncome) ~ Zip1, data=DF)
title ("Mean Household Income by Zip Code")
## Hexbinplot for Large Datasets ##
# plot the data points
plot(log10(MeanHouseholdIncome) ~ MeanEducation, data=DF)
# add a straight fitted line of the linear regression
abline(lm(log10(MeanHouseholdIncome) ~ MeanEducation, data=DF),
col='red')
install.packages("hexbin")
library(hexbin)
#
# "g" adds the grid, "r" adds the regression line
# sqrt transform on the count gives more dynamic range to the shading
# inv provides the inverse transformation function of trans
#
hexbinplot(log10(MeanHouseholdIncome) ~ MeanEducation,
data=DF, trans = sqrt, inv = function(x) x^2,
type=c("g", "r"))
## Scatterplot Matrix ##
# define the colors
colors <- c("red", "green", "blue")
#colors <- c("gray50", "white", "black")
# draw the plot matrix
pairs(iris[1:4], main = "Fisher's Iris Dataset",
pch = 21, bg = colors[unclass(iris$Species)] )
# set graphical parameter to clip plotting to the figure region
par(xpd = TRUE)
# add legend
legend(0.2, 0.02, horiz = TRUE, as.vector(unique(iris$Species)),
fill = colors, bty = "n")
## Analyzing a Variable over Time ##
plot(AirPassengers)
##########################################
# section 3.2.5 Data Exploration Versus Presentation
##########################################
# Generate random log normal income data
income = rlnorm(5000, meanlog=log(40000), sdlog=log(5))
# Part I: Create the density plot
plot(density(log10(income), adjust=0.5),
main="Distribution of Account Values (log10 scale)")
# Add rug to the density plot
rug(log10(income))
# Part II: Make the histogram
# Create "log-like bins"
breaks = c(0, 1000, 5000, 10000, 50000, 100000, 5e5, 1e6, 2e7)
# Create bins and label the data
bins = cut(income, breaks, include.lowest=T,
labels = c("< 1K", "1-5K", "5-10K", "10-50K",
"50-100K", "100-500K", "500K-1M", "> 1M"))
# Plot the bins
plot(bins, main = "Distribution of Account Values",
xlab = "Account value ($ USD)",
ylab = "Number of Accounts", col="blue")
##########################################
# section 3.3 Statistical Methods for Evaluation
##########################################
##########################################
# section 3.3.1 Hypothesis Testing
##########################################
# generate random observations from the two populations
x <- rnorm(10, mean=100, sd=5) # normal distribution centered at 100
y <- rnorm(20, mean=105, sd=5) # normal distribution centered at 105
# Student's t-test
t.test(x, y, var.equal=TRUE) # run the Student's t-test
# obtain t value for a two-sided test at a 0.05 significance level
qt(p=0.05/2, df=28, lower.tail= FALSE)
# Welch's t-test
t.test(x, y, var.equal=FALSE) # run the Welch's t-test
# Wilcoxon Rank-Sum Test
wilcox.test(x, y, conf.int = TRUE)
##########################################
# section 3.3.6 ANOVA
##########################################
offers <- sample(c("offer1", "offer2", "nopromo"), size=500, replace=T)
# Simulated 500 observations of purchase sizes on the 3 offer options
purchasesize <- ifelse(offers=="offer1", rnorm(500, mean=80, sd=30),
ifelse(offers=="offer2", rnorm(500, mean=85, sd=30),
rnorm(500, mean=40, sd=30)))
# create a data frame of offer option and purchase size
offertest <- data.frame(offer=as.factor(offers),
purchase_amt=purchasesize)
# display a summary of offertest where offer="offer1"
summary(offertest[offertest$offer=="offer1",])
# display a summary of offertest where offer="offer2"
summary(offertest[offertest$offer=="offer2",])
# display a summary of offertest where offer="nopromo"
summary(offertest[offertest$offer=="nopromo",])
# fit ANOVA test
model <- aov(purchase_amt ~ offers, data=offertest)
summary(model)
# Tukey's Honest Significant Difference (HSD) on all
# pair-wise tests for difference of means
TukeyHSD(model)
